import { IRoomManager } from "src/client/room/IRoomManager";
import { IRoomManagerListener } from "src/client/room/IRoomManagerListener";
import { IRoomObject } from "src/client/room/object/IRoomObject";
import { IRoomObjectLogicFactory } from "src/client/room/object/logic/IRoomObjectLogicFactory";
import { IRoomObjectVisualizationFactory } from "src/client/room/object/visualization/IRoomObjectVisualizationFactory";
import { IRoomGeometry } from "src/client/room/utils/IRoomGeometry";
import { IVector3D } from "src/client/room/utils/IVector3D";
import { Vector3D } from "src/client/room/utils/Vector3D";
import { IRoomSessionManager } from "../session/IRoomSessionManager";
import { ISessionDataManager } from "../session/ISessionDataManager";
import { IGetImageListener } from "./IGetImageListener";
import { ImageResult } from "./ImageResult";
import { IObjectData } from "./object/data/IObjectData";
import { RoomMapData } from "./object/RoomMapData";

export interface IRoomEngine extends IRoomManagerListener {
    selectedAvatarId: any;
    getRoomObjectPetImage(typeId: number, paletteId: number, color: number, arg3: Vector3D, scale: number, arg5: null, arg6: boolean, arg7: number, customParts: import("../avatar/pets/PetCustomPart").PetCustomPart[], posture: string);
    useRoomObject(objectId: number, objectCategory: number);
    getRoomObjectScreenLocation(roomId: any, roomIndex: any, UNIT: number, arg3: any): PIXI.Point;
    getFurnitureWallIcon(_type: number, arg1: any, arg2: string): ImageResult;
    getFurnitureFloorIcon(_type: number, arg1: any, arg2: string, _stuffData: IObjectData): ImageResult;
    _Str_5346(INVENTORY: string, id: number, category: number, type: number, arg4: string, stuffData?: IObjectData): boolean;
    cancelRoomObjectPlacement();
    isDecorating: any;
    activeRoomId: any;
    getTotalObjectsForManager(roomId: any, category: number);
    getRoomObjectByIndex(roomId: any, i: number, category: number);
    visualizationFactory: IRoomObjectVisualizationFactory;
    logicFactory: IRoomObjectLogicFactory;
    sessionDataManager: ISessionDataManager;
    roomSessionManager: IRoomSessionManager;
    roomManager: IRoomManager;
    init();
    dispose();
    ready: boolean;
    getRoomObjectImage(_previewRoomId: number, PREVIEW_OBJECT_ID: number, _currentPreviewObjectCategory: number, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor?: number): ImageResult;
    getGenericRoomObjectImage(type: string, value: string, direction: IVector3D, scale: number, listener: IGetImageListener, bgColor: number, extras: string, objectData: IObjectData, state: number, frame: number, posture: string): ImageResult;
    runUpdate();
    updateRoomObjectWallLocation(roomId: number, objectId: number, arg2: Vector3D);
    disableUpdate(flag: boolean);
    setRoomInstanceRenderingCanvasOffset(_previewRoomId: number, PREVIEW_CANVAS_ID: number, _local_4: PIXI.Point);
    getRoomInstanceRenderingCanvasOffset(_previewRoomId: number, PREVIEW_CANVAS_ID: number);
    updateRoomInstancePlaneVisibility(_previewRoomId: number, wallsVisible: boolean, floorsVisible: boolean);
    updateRoomInstancePlaneType(_previewRoomId: number, floorType: string, wallType: string, landscapeType?: string, _arg_4?: boolean): boolean;
    updateRoomObjectUserLocation(_previewRoomId: number, PREVIEW_OBJECT_ID: number, arg2: Vector3D, arg3: Vector3D, arg4: boolean, arg5: number, arg6: Vector3D, arg7: number);
    setRoomInstanceRenderingCanvasScale(_previewRoomId: number, PREVIEW_CANVAS_ID?: number, arg2?: number, arg3?: null, arg4?: null);
    getRoomInstanceRenderingCanvasScale(_previewRoomId: number, PREVIEW_CANVAS_ID?: number);
    getRoomObjectBoundingRectangle(_previewRoomId: number, PREVIEW_OBJECT_ID: number, _currentPreviewObjectCategory: number, PREVIEW_CANVAS_ID: number);
    setRoomInstanceRenderingCanvasMask(_previewRoomId: number, PREVIEW_CANVAS_ID: number, arg2: boolean);
    changeObjectState(_previewRoomId: number, PREVIEW_OBJECT_ID: number, _currentPreviewObjectCategory: number);
    updateRoomObjectUserAction(_previewRoomId: number, PREVIEW_OBJECT_ID: number, action: string, value: number, parameter: string);
    updateRoomObjectUserFigure(_previewRoomId: number, PREVIEW_OBJECT_ID: number, figure: string, gender: string, subType: string, isRiding: boolean): boolean;
    updateRoomObjectUserEffect(_previewRoomId: number, PREVIEW_OBJECT_ID: number, effectId: number);
    updateRoomObjectUserGesture(_previewRoomId: number, PREVIEW_OBJECT_ID: number, gestureId: number);
    updateRoomObjectUserPosture(_previewRoomId: number, PREVIEW_OBJECT_ID: number, type: string, parameter: string);
    addRoomObjectUser(_previewRoomId: number, PREVIEW_OBJECT_ID: number, arg2: Vector3D, arg3: Vector3D, arg4: number, arg5: number, figure: string);
    addFurnitureWall(_previewRoomId: number, PREVIEW_OBJECT_ID: number, classId: number, arg3: Vector3D, direction: IVector3D, arg5: number, objectData: string, arg7: number, arg8: number, arg9: number, arg10: string, arg11: boolean);
    addFurnitureFloor(_previewRoomId: number, PREVIEW_OBJECT_ID: number, classId: number, arg3: Vector3D, direction: IVector3D, arg5: number, objectData: IObjectData, NaN: number, arg8: number, arg9: number, arg10: number, arg11: string, arg12: boolean, arg13: boolean);
    removeRoomObjectFloor(_previewRoomId: number, PREVIEW_OBJECT_ID: number);
    removeRoomObjectWall(_previewRoomId: number, PREVIEW_OBJECT_ID: number);
    removeRoomObjectUser(_previewRoomId: number, PREVIEW_OBJECT_ID: number);
    createRoomInstance(_previewRoomId: number, arg1: RoomMapData);
    events: any;
    getRoomInstanceRenderingCanvas(roomId: any, arg1: number);
    getRoomObject(roomId: number, objectId: number, category: number): IRoomObject;
    processRoomObjectOperation(objectId: number, category: number, OBJECT_MOVE: string);
    dispatchMouseEvent(arg0: number, x: number, y: number, eventType: string, altKey: boolean, ctrlKey: boolean, shiftKey: boolean, arg7: boolean);
    setActiveRoomId(roomId: any);
    initializeRoomInstanceRenderingCanvas(roomId: any, arg1: number, width: any, height: any);
    getRoomInstanceVariable<T>(roomId: any, ROOM_MIN_X: string);
    getRoomInstanceGeometry(roomId: number, canvasId?:number): IRoomGeometry
    getRoomInstanceDisplay(roomId: any, canvasId: number, width: number, height: number, scale: number);

}